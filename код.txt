
  
with 

--Посмотрим сколько мест в самолете для различных классов обслуживания
seats_type as (select s.aircraft_code,
         count(CASE WHEN s.fare_conditions = 'Economy' THEN s.fare_conditions END)  AS seats_economy,
         count(CASE WHEN s.fare_conditions = 'Comfort' THEN s.fare_conditions END)  AS seats_comfort,
        count(CASE WHEN s.fare_conditions = 'Business' THEN s.fare_conditions END) AS seats_business
        FROM dst_project.seats AS s  
        GROUP BY 1),
        
-- Сколько билетов каждого класса продано
  tickets as (select tf.flight_id,
                count(CASE WHEN tf.fare_conditions = 'Economy' THEN tf.fare_conditions END)  AS ticket_economy,
                count(CASE WHEN tf.fare_conditions = 'Comfort' THEN tf.fare_conditions END)  AS ticket_comfort,
                count(CASE WHEN tf.fare_conditions = 'Business' THEN tf.fare_conditions END) AS ticket_business
         FROM dst_project.ticket_flights AS tf
         GROUP BY 1),
         
-- Сколько мест для каждого класса обслуживания не заполнено         
seats_looses as (select f.flight_id,
        s.seats_economy - t.ticket_economy as looses_ecnmy,
        s.seats_comfort - t.ticket_comfort as looses_cmfrt,
        s.seats_business - t.ticket_business as looses_bsns
from tickets as t
    join dst_project.flights as f 
        on t.flight_id = f.flight_id
    join seats_type as s 
        on f.aircraft_code = s.aircraft_code),
        
-- Средняя стоимость билета для всех рейсов в зависимости от класса обслуживания       
avg_amount as (select tf.flight_id,
     avg(CASE WHEN tf.fare_conditions = 'Economy' then tf.amount ENd) as econom,
     avg(CASE WHEN tf.fare_conditions = 'Comfort' then tf.amount END) as comfort,
     avg(CASE WHEN tf.fare_conditions = 'Business' then tf.amount END) as business 
from dst_project.ticket_flights as tf
GROUP by 1),


-- Недополученная выручка в зависимости от рейса и класса обслуживания
losses_by_class as(select  s.flight_id,
        aveg.econom*s.looses_ecnmy as m_lss_econom,
        --aveg.comfort*s.looses_cmfrt as m_lss_cmft, не берем в учет класс комфорт, так как в зимних рейсах этого класса нету
        aveg.business*s.looses_ecnmy as m_lss_business
from avg_amount as aveg
    join seats_looses as s
     on aveg.flight_id = s.flight_id),

--Добавим id самолета к таблице полетов
aircrafts AS (SELECT f.flight_id, 
       f.flight_no,
       f.departure_airport,
       f.arrival_airport, 
       f.scheduled_departure,
       f.status,
       fv.scheduled_arrival_local,
       a.aircraft_code
FROM dst_project.flights f
    LEFT JOIN dst_project.aircrafts a ON f.aircraft_code = a.aircraft_code
    LEFT Join dst_project.flights_v fv on f.flight_id = fv.flight_id),
    
-- Посчитаем суммарную выручку со всех рейсов 
revenue AS (SELECT flight_id, sum(amount) total_amount
     FROM dst_project.ticket_flights tf
     GROUP BY 1),

-- Посчитаем количесво мест на каждом самолете     
seats AS (SELECT a.aircraft_code,
        count(s.seat_no) seats
FROM dst_project.aircrafts a
LEFT JOIN dst_project.seats s on a.aircraft_code=s.aircraft_code
GROUP BY 1)

--Сгруппируем все нужные данные
select air.flight_id, 
       air.flight_no,
       air.departure_airport,
       air.arrival_airport,
       air.scheduled_departure,
       to_char(air.scheduled_departure,'day') as day_of_departure,
       air.scheduled_arrival_local,
       to_char(air.scheduled_arrival_local,'day') as day_of_arrival,
      rev.total_amount,
       st.seats,
       ls.looses_ecnmy+ls.looses_cmfrt+ls.looses_bsns as free_seats, 
       l.m_lss_econom,
       --l.m_lss_cmft,
       l.m_lss_business
FROM aircrafts as  air
       LEFT JOIN revenue rev on air.flight_id = rev.flight_id
       LEFT JOIN seats st on air.aircraft_code = st.aircraft_code
       left join losses_by_class l on air.flight_id = l.flight_id
       left join seats_looses ls on air.flight_id = ls.flight_id
WHERE departure_airport = 'AAQ'
  AND (date_trunc('month', scheduled_departure) in ('2017-01-01', '2017-02-01', '2017-12-01','2016-12-01'))
  AND status not in ('Cancelled')
  order by scheduled_departure